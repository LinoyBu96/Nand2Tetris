// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array memory, free_list;

    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let memory = 0;
		let free_list = 2048;
        let free_list[0] = 14336;
        let free_list[1] = -1;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
		var int block, prev_block, temp;

		let block = free_list;
		while (~(block[1] = -1) & ~(block[0] > size)) {
		    let prev_block = block;
			let block = block[1];
		}
		if (((block + 1) = -1) & ~(block[0] > size)) {
            return -1;
		}

		if (block[0] < (size + 3)) {  //no need to cut the block
				let prev_block[1] = block[1]; // set next to jump over the block
				let block[0] = size + 1;
				return block + 1;
			}
        else {
            let block[0] = block[0] - size - 1;
            let temp = block + block[0] - 1;
            let temp[0] = size + 1;
            return temp + 1;
        }

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList

        let o[0] = o[-1];
        let o[1] = free_list[1];
        let free_list[1] = o;
        return;
    }

    /** Returns the maximal element contained in the given Array/object.
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the
        // start of the block, and this can be used to implement Memory.max.
        var int i, max_val, size;

        let i = 1;
        let size = o[-1] - 1;
        let max_val = o[0];
        while (i < size) {
            if (o[i] > max_val) {
                let max_val = o[i];
            }
            let i = i + 1;
        }
        return max_val;
    }
}
