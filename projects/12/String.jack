// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;  // edit?
        }
        let str = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {  // in case being called from Keyboard.readLine
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. "-77 hey" > -77 */
    method int intValue() {
        var int i, d, int_val;
        var boolean is_neg;

        let i = 0;
        let int_val = 0;
        if ((length > 0) & (str[0] = 45)) {
            let is_neg = true;
            let i = i + 1;
        }
        while (i < length) {
            let d = str[i];
            if (d > 47 & d < 58) {
                let int_val = (int_val * 10) + (d - 48);
            }
            let i = i + 1;
        }
        if (is_neg) {
            return -int_val;
        }
        return int_val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        let length = 0; // reset the string
        if (val < 0) {
            let val = -val;
            let str[length] = 45;  //neg - add -
            let length = length + 1;
        }
        do setPosInt(val);
        return;
    }

    method void setPosInt(int val) {
        var int cur_val, reminder;

        let cur_val = val / 10;
        let reminder = val - (cur_val * 10);
        if (val > 9) {
            do setPosInt(cur_val);
        }
        let str[length] = reminder + 48;
        let length = length + 1;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
