// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    Mux16 (a=instruction, b=ALUres, sel=instruction[15], out=newA);
    Not (in=instruction[15], out=isA);
    And (a=instruction[15], b=instruction[5], out=isCanddestA);
    Xor (a=isA, b=isCanddestA, out=loadA);
    ARegister (in=newA, load=loadA, out=outA, out[0..14]=addressM);  //load if A=0 or C && dest=A=(ins[5]=1))

    And(a=instruction[15], b=instruction[4], out=loadD);  //C && dest=D=(ins[4]=1))
    DRegister (in=ALUres, load=loadD, out=outD);

    Mux16 (a=outA, b=inM, sel=instruction[12], out=aluY);
    ALU(x=outD, y=aluY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUres, out=outM, zr=isZero, ng=isNeg);

    DMux8Way(in=true, sel=instruction[0..2], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
    Not(in=isZero, out=notZero);
    Not(in=isNeg, out=notNeg);

    And (a=b, b=notZero, out=bAndnotZero);
    And (a=c, b=isZero, out=bAndisZero);
    Or (a=bAndnotZero, b=bAndisZero, out=bOrc);
    Or (a=bOrc, b=d, out=bOrcOrd);
    And (a=notNeg, b=bOrcOrd, out=jmp1);

    And (a=isNeg, b=e, out=isNegAnde);
    Or (a=isNegAnde, b=f, out=eOrf);
    And (a=notZero, b=eOrf, out=jmp2);

    Or (a=isZero, b=isNeg, out=zOrn);
    And (a=zOrn, b=g, out=jmp3);

    Or (a=h, b=jmp1, out=loadPC1);
    Or (a=jmp2, b=jmp3, out=loadPC2);
    Or (a=loadPC1, b=loadPC2, out=loadPC3);
    And(a=instruction[15], b=loadPC3, out=loadPC);
    Not(in=loadPC, out=noLoadPC);
    PC(in=outA, load=loadPC, inc=noLoadPC, reset=reset, out[0..14]=pc);
    
    And(a=instruction[3], b=instruction[15], out=writeM);
    //Mux16(a=false, b=outA, sel=doWriteM, out[0..14]=addressM);
    //Mux16(a=false, b=ALUres, sel=doWriteM, out=outM);
}